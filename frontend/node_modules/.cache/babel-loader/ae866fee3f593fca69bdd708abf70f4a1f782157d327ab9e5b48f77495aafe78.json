{"ast":null,"code":"import { FETCH_GROUNDS_REQUEST_USER, FETCH_GROUNDS_SUCCESS_USER, FETCH_GROUNDS_FAILURE_USER, UPDATE_GROUND_REQUEST, UPDATE_GROUND_SUCCESS, UPDATE_GROUND_FAILURE } from '../actions/groundActions';\nconst initialState = {\n  grounds: {\n    grounds: [],\n    // array of ground objects\n    userGrounds: [],\n    loading: false,\n    error: null\n  }\n};\nconst groundReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'FETCH_GROUNDS_REQUEST':\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case 'FETCH_GROUNDS_SUCCESS':\n      return {\n        ...state,\n        loading: false,\n        grounds: action.payload\n      };\n    case 'FETCH_GROUNDS_FAILURE':\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    case FETCH_GROUNDS_REQUEST_USER:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case FETCH_GROUNDS_SUCCESS_USER:\n      return {\n        ...state,\n        loading: false,\n        grounds: action.payload\n      };\n    case FETCH_GROUNDS_FAILURE_USER:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n\n    // Update Ground Cases\n    case UPDATE_GROUND_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case UPDATE_GROUND_SUCCESS:\n      // Update the specific ground in the state\n      const updatedGrounds = state.grounds.map(ground => ground.id === action.payload.grounds[0].id ? {\n        ...ground,\n        ...action.payload.grounds[0]\n      } : ground);\n      return {\n        ...state,\n        grounds: updatedGrounds,\n        // Update state with the new ground data\n        error: null // Clear any previous error\n      };\n    case UPDATE_GROUND_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport default groundReducer;","map":{"version":3,"names":["FETCH_GROUNDS_REQUEST_USER","FETCH_GROUNDS_SUCCESS_USER","FETCH_GROUNDS_FAILURE_USER","UPDATE_GROUND_REQUEST","UPDATE_GROUND_SUCCESS","UPDATE_GROUND_FAILURE","initialState","grounds","userGrounds","loading","error","groundReducer","state","action","type","payload","updatedGrounds","map","ground","id"],"sources":["F:/React Projects/cricbook/frontend/cricslot/src/redux/reducers/groundReducers.js"],"sourcesContent":["import {\r\n  FETCH_GROUNDS_REQUEST_USER,\r\n  FETCH_GROUNDS_SUCCESS_USER,\r\n  FETCH_GROUNDS_FAILURE_USER,\r\n  UPDATE_GROUND_REQUEST,\r\n  UPDATE_GROUND_SUCCESS,\r\n  UPDATE_GROUND_FAILURE\r\n} from '../actions/groundActions';\r\n\r\nconst initialState = {\r\n  grounds: {\r\n    grounds: [], // array of ground objects\r\n    userGrounds: [],\r\n    loading: false,\r\n    error: null,\r\n  },\r\n};\r\n\r\nconst groundReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_GROUNDS_REQUEST':\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null,\r\n      };\r\n    case 'FETCH_GROUNDS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        grounds: action.payload,\r\n      };\r\n    case 'FETCH_GROUNDS_FAILURE':\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.payload,\r\n      };\r\n\r\n      case FETCH_GROUNDS_REQUEST_USER:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null,\r\n      };\r\n    case FETCH_GROUNDS_SUCCESS_USER:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        grounds: action.payload,\r\n      };\r\n    case FETCH_GROUNDS_FAILURE_USER:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.payload,\r\n      };\r\n\r\n      // Update Ground Cases\r\n    case UPDATE_GROUND_REQUEST:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null,\r\n      };\r\n      case UPDATE_GROUND_SUCCESS:\r\n        // Update the specific ground in the state\r\n        const updatedGrounds = state.grounds.map(ground =>\r\n          ground.id === action.payload.grounds[0].id \r\n            ? { ...ground, ...action.payload.grounds[0] } \r\n            : ground\r\n        );\r\n        return {\r\n          ...state,\r\n          grounds: updatedGrounds, // Update state with the new ground data\r\n          error: null, // Clear any previous error\r\n        };\r\n    case UPDATE_GROUND_FAILURE:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default groundReducer;\r\n"],"mappings":"AAAA,SACEA,0BAA0B,EAC1BC,0BAA0B,EAC1BC,0BAA0B,EAC1BC,qBAAqB,EACrBC,qBAAqB,EACrBC,qBAAqB,QAChB,0BAA0B;AAEjC,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE;IACPA,OAAO,EAAE,EAAE;IAAE;IACbC,WAAW,EAAE,EAAE;IACfC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACT;AACF,CAAC;AAED,MAAMC,aAAa,GAAGA,CAACC,KAAK,GAAGN,YAAY,EAAEO,MAAM,KAAK;EACtD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,uBAAuB;MAC1B,OAAO;QACL,GAAGF,KAAK;QACRH,OAAO,EAAE,IAAI;QACbC,KAAK,EAAE;MACT,CAAC;IACH,KAAK,uBAAuB;MAC1B,OAAO;QACL,GAAGE,KAAK;QACRH,OAAO,EAAE,KAAK;QACdF,OAAO,EAAEM,MAAM,CAACE;MAClB,CAAC;IACH,KAAK,uBAAuB;MAC1B,OAAO;QACL,GAAGH,KAAK;QACRH,OAAO,EAAE,KAAK;QACdC,KAAK,EAAEG,MAAM,CAACE;MAChB,CAAC;IAED,KAAKf,0BAA0B;MAC/B,OAAO;QACL,GAAGY,KAAK;QACRH,OAAO,EAAE,IAAI;QACbC,KAAK,EAAE;MACT,CAAC;IACH,KAAKT,0BAA0B;MAC7B,OAAO;QACL,GAAGW,KAAK;QACRH,OAAO,EAAE,KAAK;QACdF,OAAO,EAAEM,MAAM,CAACE;MAClB,CAAC;IACH,KAAKb,0BAA0B;MAC7B,OAAO;QACL,GAAGU,KAAK;QACRH,OAAO,EAAE,KAAK;QACdC,KAAK,EAAEG,MAAM,CAACE;MAChB,CAAC;;IAED;IACF,KAAKZ,qBAAqB;MACxB,OAAO;QACL,GAAGS,KAAK;QACRH,OAAO,EAAE,IAAI;QACbC,KAAK,EAAE;MACT,CAAC;IACD,KAAKN,qBAAqB;MACxB;MACA,MAAMY,cAAc,GAAGJ,KAAK,CAACL,OAAO,CAACU,GAAG,CAACC,MAAM,IAC7CA,MAAM,CAACC,EAAE,KAAKN,MAAM,CAACE,OAAO,CAACR,OAAO,CAAC,CAAC,CAAC,CAACY,EAAE,GACtC;QAAE,GAAGD,MAAM;QAAE,GAAGL,MAAM,CAACE,OAAO,CAACR,OAAO,CAAC,CAAC;MAAE,CAAC,GAC3CW,MACN,CAAC;MACD,OAAO;QACL,GAAGN,KAAK;QACRL,OAAO,EAAES,cAAc;QAAE;QACzBN,KAAK,EAAE,IAAI,CAAE;MACf,CAAC;IACL,KAAKL,qBAAqB;MACxB,OAAO;QACL,GAAGO,KAAK;QACRH,OAAO,EAAE,KAAK;QACdC,KAAK,EAAEG,MAAM,CAACE;MAChB,CAAC;IAEH;MACE,OAAOH,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}