{"ast":null,"code":"import axios from 'axios';\nimport { REGISTER_REQUEST, LOGIN_REQUEST, REGISTER_SUCCESS, LOGIN_SUCCESS, REGISTER_FAILURE, LOGIN_FAILURE } from '../type';\nexport const registerUser = formData => async dispatch => {\n  dispatch({\n    type: REGISTER_REQUEST\n  });\n  try {\n    const res = await axios.post('http://localhost:5000/api/auth/register', formData);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    alert(res.data.msg);\n    return res;\n  } catch (err) {\n    dispatch({\n      type: REGISTER_FAILURE,\n      payload: err.response.data.msg\n    });\n    console.log(err, \"error\");\n    alert(err.response.data.msg, \"err.response.data.msg\");\n    // alert(err.response.data.errors[0].msg);\n  }\n};\nexport const loginUser = formData => async dispatch => {\n  dispatch({\n    type: LOGIN_REQUEST\n  });\n  try {\n    const res = await axios.post('http://localhost:5000/api/auth/login', formData);\n    // Extract token and user data from the response\n    const {\n      token,\n      user\n    } = res.data;\n    // Save the token in local storage\n    localStorage.setItem('token', token);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        token,\n        user\n      }\n    });\n    // Optional: Set token in axios headers if needed for subsequent requests\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    alert(res.data.msg); // Alert success message\n    return res;\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAILURE,\n      payload: err.response.data.msg\n    });\n    alert(err.response.data.msg); // Alert error message\n  }\n};","map":{"version":3,"names":["axios","REGISTER_REQUEST","LOGIN_REQUEST","REGISTER_SUCCESS","LOGIN_SUCCESS","REGISTER_FAILURE","LOGIN_FAILURE","registerUser","formData","dispatch","type","res","post","payload","data","alert","msg","err","response","console","log","loginUser","token","user","localStorage","setItem","defaults","headers","common"],"sources":["F:/CRIC/frontend/src/redux/actions/authActions.js"],"sourcesContent":["import axios from 'axios';\r\nimport { REGISTER_REQUEST, LOGIN_REQUEST, REGISTER_SUCCESS,  LOGIN_SUCCESS,  REGISTER_FAILURE, LOGIN_FAILURE } from '../type';\r\n\r\nexport const registerUser = (formData) => async (dispatch) => {\r\n  dispatch({ type: REGISTER_REQUEST });\r\n  try {\r\n    const res = await axios.post('http://localhost:5000/api/auth/register', formData);\r\n    dispatch({ type: REGISTER_SUCCESS, payload: res.data });\r\n    alert(res.data.msg);\r\n    return res;\r\n  } catch (err) {\r\n    dispatch({ type: REGISTER_FAILURE, payload: err.response.data.msg });\r\n     console.log(err, \"error\");\r\n     alert(err.response.data.msg, \"err.response.data.msg\");\r\n   // alert(err.response.data.errors[0].msg);\r\n  }\r\n};\r\n\r\nexport const loginUser = (formData) => async (dispatch) => {\r\n  dispatch({ type: LOGIN_REQUEST });\r\n  try {\r\n    const res = await axios.post('http://localhost:5000/api/auth/login', formData);\r\n    // Extract token and user data from the response\r\n    const { token, user } = res.data;\r\n    // Save the token in local storage\r\n    localStorage.setItem('token', token);\r\n    dispatch({ type: LOGIN_SUCCESS, payload: { token, user } });\r\n       // Optional: Set token in axios headers if needed for subsequent requests\r\n     axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    alert(res.data.msg); // Alert success message\r\n    return res;\r\n  } catch (err) {\r\n    dispatch({ type: LOGIN_FAILURE, payload: err.response.data.msg });\r\n    alert(err.response.data.msg); // Alert error message\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,gBAAgB,EAAEC,aAAa,EAAEC,gBAAgB,EAAGC,aAAa,EAAGC,gBAAgB,EAAEC,aAAa,QAAQ,SAAS;AAE7H,OAAO,MAAMC,YAAY,GAAIC,QAAQ,IAAK,MAAOC,QAAQ,IAAK;EAC5DA,QAAQ,CAAC;IAAEC,IAAI,EAAET;EAAiB,CAAC,CAAC;EACpC,IAAI;IACF,MAAMU,GAAG,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,yCAAyC,EAAEJ,QAAQ,CAAC;IACjFC,QAAQ,CAAC;MAAEC,IAAI,EAAEP,gBAAgB;MAAEU,OAAO,EAAEF,GAAG,CAACG;IAAK,CAAC,CAAC;IACvDC,KAAK,CAACJ,GAAG,CAACG,IAAI,CAACE,GAAG,CAAC;IACnB,OAAOL,GAAG;EACZ,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZR,QAAQ,CAAC;MAAEC,IAAI,EAAEL,gBAAgB;MAAEQ,OAAO,EAAEI,GAAG,CAACC,QAAQ,CAACJ,IAAI,CAACE;IAAI,CAAC,CAAC;IACnEG,OAAO,CAACC,GAAG,CAACH,GAAG,EAAE,OAAO,CAAC;IACzBF,KAAK,CAACE,GAAG,CAACC,QAAQ,CAACJ,IAAI,CAACE,GAAG,EAAE,uBAAuB,CAAC;IACvD;EACD;AACF,CAAC;AAED,OAAO,MAAMK,SAAS,GAAIb,QAAQ,IAAK,MAAOC,QAAQ,IAAK;EACzDA,QAAQ,CAAC;IAAEC,IAAI,EAAER;EAAc,CAAC,CAAC;EACjC,IAAI;IACF,MAAMS,GAAG,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,sCAAsC,EAAEJ,QAAQ,CAAC;IAC9E;IACA,MAAM;MAAEc,KAAK;MAAEC;IAAK,CAAC,GAAGZ,GAAG,CAACG,IAAI;IAChC;IACAU,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,KAAK,CAAC;IACpCb,QAAQ,CAAC;MAAEC,IAAI,EAAEN,aAAa;MAAES,OAAO,EAAE;QAAES,KAAK;QAAEC;MAAK;IAAE,CAAC,CAAC;IACxD;IACFvB,KAAK,CAAC0B,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUN,KAAK,EAAE;IACnEP,KAAK,CAACJ,GAAG,CAACG,IAAI,CAACE,GAAG,CAAC,CAAC,CAAC;IACrB,OAAOL,GAAG;EACZ,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZR,QAAQ,CAAC;MAAEC,IAAI,EAAEJ,aAAa;MAAEO,OAAO,EAAEI,GAAG,CAACC,QAAQ,CAACJ,IAAI,CAACE;IAAI,CAAC,CAAC;IACjED,KAAK,CAACE,GAAG,CAACC,QAAQ,CAACJ,IAAI,CAACE,GAAG,CAAC,CAAC,CAAC;EAChC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}