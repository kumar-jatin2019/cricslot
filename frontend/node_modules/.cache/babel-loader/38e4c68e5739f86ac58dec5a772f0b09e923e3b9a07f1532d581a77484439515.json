{"ast":null,"code":"// import axios from 'axios';\nimport axiosInstance from '../../authToken';\n// Action types\nconst FETCH_GROUNDS_REQUEST = 'FETCH_GROUNDS_REQUEST';\nconst FETCH_GROUNDS_SUCCESS = 'FETCH_GROUNDS_SUCCESS';\nconst FETCH_GROUNDS_FAILURE = 'FETCH_GROUNDS_FAILURE';\nexport const FETCH_GROUNDS_REQUEST_USER = 'FETCH_GROUNDS_REQUEST_USER';\nexport const FETCH_GROUNDS_SUCCESS_USER = 'FETCH_GROUNDS_SUCCESS_USER';\nexport const FETCH_GROUNDS_FAILURE_USER = 'FETCH_GROUNDS_FAILURE_USER';\nexport const createGround = groundData => async (dispatch, getState) => {\n  try {\n    // Get the token from the Redux store\n    const token = getState().auth.token;\n    console.log(token, \"token\");\n\n    // Set the Authorization header with Bearer token\n    // const config = {\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //     Authorization: `Bearer ${token}`,\n    //   },\n    // };\n    const res = await axiosInstance.post('/auth/createGrounds', groundData); // Adjust API endpoint as needed\n    dispatch({\n      type: 'CREATE_GROUND_SUCCESS',\n      payload: res.data\n    });\n    return Promise.resolve(res.data); // Return a resolved promise if successful\n  } catch (err) {\n    dispatch({\n      type: 'CREATE_GROUND_FAILURE',\n      payload: err.response.data.msg\n    });\n    return Promise.reject(err); // Return a rejected promise if there's an error\n  }\n};\n\n// Fetch Grounds Action\nexport const fetchGrounds = () => {\n  return async dispatch => {\n    dispatch({\n      type: FETCH_GROUNDS_REQUEST\n    });\n    try {\n      const response = await axiosInstance.get('/auth/myGrounds'); // Adjust the URL as needed\n      dispatch({\n        type: FETCH_GROUNDS_SUCCESS,\n        payload: response.data\n      });\n      return Promise.resolve(response.data); // Return a resolved promise if successful\n    } catch (error) {\n      dispatch({\n        type: FETCH_GROUNDS_FAILURE,\n        payload: error.message\n      });\n      return Promise.reject(error); // Return a rejected promise if there's an error\n    }\n  };\n};\nexport const fetchUserGrounds = () => async dispatch => {\n  dispatch({\n    type: FETCH_GROUNDS_REQUEST_USER\n  });\n  try {\n    const response = await axiosInstance.get('/auth/grounds'); // API to fetch all grounds\n    dispatch({\n      type: FETCH_GROUNDS_SUCCESS_USER,\n      payload: response.data.grounds\n    });\n  } catch (error) {\n    dispatch({\n      type: FETCH_GROUNDS_FAILURE_USER,\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"names":["axiosInstance","FETCH_GROUNDS_REQUEST","FETCH_GROUNDS_SUCCESS","FETCH_GROUNDS_FAILURE","FETCH_GROUNDS_REQUEST_USER","FETCH_GROUNDS_SUCCESS_USER","FETCH_GROUNDS_FAILURE_USER","createGround","groundData","dispatch","getState","token","auth","console","log","res","post","type","payload","data","Promise","resolve","err","response","msg","reject","fetchGrounds","get","error","message","fetchUserGrounds","grounds"],"sources":["F:/React Projects/cricbook/frontend/cricslot/src/redux/actions/groundActions.js"],"sourcesContent":["// import axios from 'axios';\r\nimport axiosInstance from '../../authToken';\r\n// Action types\r\nconst FETCH_GROUNDS_REQUEST = 'FETCH_GROUNDS_REQUEST';\r\nconst FETCH_GROUNDS_SUCCESS = 'FETCH_GROUNDS_SUCCESS';\r\nconst FETCH_GROUNDS_FAILURE = 'FETCH_GROUNDS_FAILURE';\r\n\r\nexport const FETCH_GROUNDS_REQUEST_USER = 'FETCH_GROUNDS_REQUEST_USER';\r\nexport const FETCH_GROUNDS_SUCCESS_USER = 'FETCH_GROUNDS_SUCCESS_USER';\r\nexport const FETCH_GROUNDS_FAILURE_USER = 'FETCH_GROUNDS_FAILURE_USER';\r\n\r\nexport const createGround = (groundData) => async (dispatch,getState) => {\r\n  try {\r\n    // Get the token from the Redux store\r\n    const token = getState().auth.token;\r\n    console.log(token, \"token\");\r\n\r\n    // Set the Authorization header with Bearer token\r\n    // const config = {\r\n    //   headers: {\r\n    //     'Content-Type': 'application/json',\r\n    //     Authorization: `Bearer ${token}`,\r\n    //   },\r\n    // };\r\n    const res = await axiosInstance.post('/auth/createGrounds', groundData); // Adjust API endpoint as needed\r\n    dispatch({ type: 'CREATE_GROUND_SUCCESS', payload: res.data });\r\n    return Promise.resolve(res.data); // Return a resolved promise if successful\r\n  } catch (err) {\r\n    dispatch({ type: 'CREATE_GROUND_FAILURE', payload: err.response.data.msg });\r\n    return Promise.reject(err); // Return a rejected promise if there's an error\r\n  }\r\n};\r\n\r\n// Fetch Grounds Action\r\nexport const fetchGrounds = () => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: FETCH_GROUNDS_REQUEST });\r\n    try {\r\n      const response = await axiosInstance.get('/auth/myGrounds'); // Adjust the URL as needed\r\n      dispatch({ type: FETCH_GROUNDS_SUCCESS, payload: response.data });\r\n      return Promise.resolve(response.data); // Return a resolved promise if successful\r\n    } catch (error) {\r\n      dispatch({ type: FETCH_GROUNDS_FAILURE, payload: error.message });\r\n      return Promise.reject(error); // Return a rejected promise if there's an error\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchUserGrounds = () => async dispatch => {\r\n  dispatch({ type: FETCH_GROUNDS_REQUEST_USER });\r\n  try {\r\n    const response = await axiosInstance.get('/auth/grounds'); // API to fetch all grounds\r\n    dispatch({ type: FETCH_GROUNDS_SUCCESS_USER, payload: response.data.grounds });\r\n  } catch (error) {\r\n    dispatch({ type: FETCH_GROUNDS_FAILURE_USER, payload: error.message });\r\n  }\r\n};\r\n\r\n\r\n"],"mappings":"AAAA;AACA,OAAOA,aAAa,MAAM,iBAAiB;AAC3C;AACA,MAAMC,qBAAqB,GAAG,uBAAuB;AACrD,MAAMC,qBAAqB,GAAG,uBAAuB;AACrD,MAAMC,qBAAqB,GAAG,uBAAuB;AAErD,OAAO,MAAMC,0BAA0B,GAAG,4BAA4B;AACtE,OAAO,MAAMC,0BAA0B,GAAG,4BAA4B;AACtE,OAAO,MAAMC,0BAA0B,GAAG,4BAA4B;AAEtE,OAAO,MAAMC,YAAY,GAAIC,UAAU,IAAK,OAAOC,QAAQ,EAACC,QAAQ,KAAK;EACvE,IAAI;IACF;IACA,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC,CAACE,IAAI,CAACD,KAAK;IACnCE,OAAO,CAACC,GAAG,CAACH,KAAK,EAAE,OAAO,CAAC;;IAE3B;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAMI,GAAG,GAAG,MAAMf,aAAa,CAACgB,IAAI,CAAC,qBAAqB,EAAER,UAAU,CAAC,CAAC,CAAC;IACzEC,QAAQ,CAAC;MAAEQ,IAAI,EAAE,uBAAuB;MAAEC,OAAO,EAAEH,GAAG,CAACI;IAAK,CAAC,CAAC;IAC9D,OAAOC,OAAO,CAACC,OAAO,CAACN,GAAG,CAACI,IAAI,CAAC,CAAC,CAAC;EACpC,CAAC,CAAC,OAAOG,GAAG,EAAE;IACZb,QAAQ,CAAC;MAAEQ,IAAI,EAAE,uBAAuB;MAAEC,OAAO,EAAEI,GAAG,CAACC,QAAQ,CAACJ,IAAI,CAACK;IAAI,CAAC,CAAC;IAC3E,OAAOJ,OAAO,CAACK,MAAM,CAACH,GAAG,CAAC,CAAC,CAAC;EAC9B;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,YAAY,GAAGA,CAAA,KAAM;EAChC,OAAO,MAAOjB,QAAQ,IAAK;IACzBA,QAAQ,CAAC;MAAEQ,IAAI,EAAEhB;IAAsB,CAAC,CAAC;IACzC,IAAI;MACF,MAAMsB,QAAQ,GAAG,MAAMvB,aAAa,CAAC2B,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC;MAC7DlB,QAAQ,CAAC;QAAEQ,IAAI,EAAEf,qBAAqB;QAAEgB,OAAO,EAAEK,QAAQ,CAACJ;MAAK,CAAC,CAAC;MACjE,OAAOC,OAAO,CAACC,OAAO,CAACE,QAAQ,CAACJ,IAAI,CAAC,CAAC,CAAC;IACzC,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdnB,QAAQ,CAAC;QAAEQ,IAAI,EAAEd,qBAAqB;QAAEe,OAAO,EAAEU,KAAK,CAACC;MAAQ,CAAC,CAAC;MACjE,OAAOT,OAAO,CAACK,MAAM,CAACG,KAAK,CAAC,CAAC,CAAC;IAChC;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAGA,CAAA,KAAM,MAAMrB,QAAQ,IAAI;EACtDA,QAAQ,CAAC;IAAEQ,IAAI,EAAEb;EAA2B,CAAC,CAAC;EAC9C,IAAI;IACF,MAAMmB,QAAQ,GAAG,MAAMvB,aAAa,CAAC2B,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC;IAC3DlB,QAAQ,CAAC;MAAEQ,IAAI,EAAEZ,0BAA0B;MAAEa,OAAO,EAAEK,QAAQ,CAACJ,IAAI,CAACY;IAAQ,CAAC,CAAC;EAChF,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdnB,QAAQ,CAAC;MAAEQ,IAAI,EAAEX,0BAA0B;MAAEY,OAAO,EAAEU,KAAK,CAACC;IAAQ,CAAC,CAAC;EACxE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}