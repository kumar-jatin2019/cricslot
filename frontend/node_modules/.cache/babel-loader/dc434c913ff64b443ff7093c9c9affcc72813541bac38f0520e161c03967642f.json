{"ast":null,"code":"// import axios from 'axios';\nimport axiosInstance from '../../authToken';\n// Action types\nconst FETCH_GROUNDS_REQUEST = 'FETCH_GROUNDS_REQUEST';\nconst FETCH_GROUNDS_SUCCESS = 'FETCH_GROUNDS_SUCCESS';\nconst FETCH_GROUNDS_FAILURE = 'FETCH_GROUNDS_FAILURE';\nexport const FETCH_GROUNDS_REQUEST_USER = 'FETCH_GROUNDS_REQUEST_USER';\nexport const FETCH_GROUNDS_SUCCESS_USER = 'FETCH_GROUNDS_SUCCESS_USER';\nexport const FETCH_GROUNDS_FAILURE_USER = 'FETCH_GROUNDS_FAILURE_USER';\nexport const UPDATE_GROUND_REQUEST = 'UPDATE_GROUND_REQUEST';\nexport const UPDATE_GROUND_SUCCESS = 'UPDATE_GROUND_SUCCESS';\nexport const UPDATE_GROUND_FAILURE = 'UPDATE_GROUND_FAILURE';\nexport const createGround = groundData => async (dispatch, getState) => {\n  try {\n    const token = getState().auth.token;\n    console.log(token, \"token\");\n    const res = await axiosInstance.post('/auth/createGrounds', groundData); // Adjust API endpoint as needed\n    dispatch({\n      type: 'CREATE_GROUND_SUCCESS',\n      payload: res.data\n    });\n    return Promise.resolve(res.data); // Return a resolved promise if successful\n  } catch (err) {\n    dispatch({\n      type: 'CREATE_GROUND_FAILURE',\n      payload: err.response.data.msg\n    });\n    return Promise.reject(err); // Return a rejected promise if there's an error\n  }\n};\nexport const updateGround = groundData => async (dispatch, getState) => {\n  try {\n    const token = getState().auth.token; // Get the token from the state\n    console.log(token, \"token\");\n\n    // Use the groundData to send the appropriate update request\n    const res = await axiosInstance.put(`/auth/grounds/${groundData.id}`, groundData); // Adjust API endpoint as needed\n\n    // Dispatch success action with the updated ground data\n    dispatch({\n      type: 'UPDATE_GROUND_SUCCESS',\n      payload: res.data\n    });\n    return Promise.resolve(res.data); // Return a resolved promise if successful\n  } catch (err) {\n    // Dispatch failure action with the error message\n    dispatch({\n      type: 'UPDATE_GROUND_FAILURE',\n      payload: err.response ? err.response.data.msg : 'Update failed'\n    });\n    return Promise.reject(err); // Return a rejected promise if there's an error\n  }\n};\n// Fetch Grounds Action\nexport const fetchGrounds = () => {\n  return async dispatch => {\n    dispatch({\n      type: FETCH_GROUNDS_REQUEST\n    });\n    try {\n      const response = await axiosInstance.get('/auth/myGrounds'); // Adjust the URL as needed\n      dispatch({\n        type: FETCH_GROUNDS_SUCCESS,\n        payload: response.data\n      });\n      return Promise.resolve(response.data); // Return a resolved promise if successful\n    } catch (error) {\n      dispatch({\n        type: FETCH_GROUNDS_FAILURE,\n        payload: error.message\n      });\n      return Promise.reject(error); // Return a rejected promise if there's an error\n    }\n  };\n};\nexport const fetchUserGrounds = () => async dispatch => {\n  dispatch({\n    type: FETCH_GROUNDS_REQUEST_USER\n  });\n  try {\n    const response = await axiosInstance.get('/auth/grounds'); // API to fetch all grounds\n    dispatch({\n      type: FETCH_GROUNDS_SUCCESS_USER,\n      payload: response.data.grounds\n    });\n    return Promise.resolve(response.data);\n  } catch (error) {\n    dispatch({\n      type: FETCH_GROUNDS_FAILURE_USER,\n      payload: error.message\n    });\n    return Promise.reject(error); // Return a rejected promise if there's an error\n  }\n};","map":{"version":3,"names":["axiosInstance","FETCH_GROUNDS_REQUEST","FETCH_GROUNDS_SUCCESS","FETCH_GROUNDS_FAILURE","FETCH_GROUNDS_REQUEST_USER","FETCH_GROUNDS_SUCCESS_USER","FETCH_GROUNDS_FAILURE_USER","UPDATE_GROUND_REQUEST","UPDATE_GROUND_SUCCESS","UPDATE_GROUND_FAILURE","createGround","groundData","dispatch","getState","token","auth","console","log","res","post","type","payload","data","Promise","resolve","err","response","msg","reject","updateGround","put","id","fetchGrounds","get","error","message","fetchUserGrounds","grounds"],"sources":["F:/React Projects/cricbook/frontend/cricslot/src/redux/actions/groundActions.js"],"sourcesContent":["// import axios from 'axios';\r\nimport axiosInstance from '../../authToken';\r\n// Action types\r\nconst FETCH_GROUNDS_REQUEST = 'FETCH_GROUNDS_REQUEST';\r\nconst FETCH_GROUNDS_SUCCESS = 'FETCH_GROUNDS_SUCCESS';\r\nconst FETCH_GROUNDS_FAILURE = 'FETCH_GROUNDS_FAILURE';\r\n\r\nexport const FETCH_GROUNDS_REQUEST_USER = 'FETCH_GROUNDS_REQUEST_USER';\r\nexport const FETCH_GROUNDS_SUCCESS_USER = 'FETCH_GROUNDS_SUCCESS_USER';\r\nexport const FETCH_GROUNDS_FAILURE_USER = 'FETCH_GROUNDS_FAILURE_USER';\r\n\r\nexport const UPDATE_GROUND_REQUEST = 'UPDATE_GROUND_REQUEST';\r\nexport const UPDATE_GROUND_SUCCESS = 'UPDATE_GROUND_SUCCESS';\r\nexport const UPDATE_GROUND_FAILURE = 'UPDATE_GROUND_FAILURE';\r\n\r\nexport const createGround = (groundData) => async (dispatch,getState) => {\r\n  try {\r\n    const token = getState().auth.token;\r\n    console.log(token, \"token\");\r\n    const res = await axiosInstance.post('/auth/createGrounds', groundData); // Adjust API endpoint as needed\r\n    dispatch({ type: 'CREATE_GROUND_SUCCESS', payload: res.data });\r\n    return Promise.resolve(res.data); // Return a resolved promise if successful\r\n  } catch (err) {\r\n    dispatch({ type: 'CREATE_GROUND_FAILURE', payload: err.response.data.msg });\r\n    return Promise.reject(err); // Return a rejected promise if there's an error\r\n  }\r\n};\r\nexport const updateGround = (groundData) => async (dispatch, getState) => {\r\n  try {\r\n    const token = getState().auth.token; // Get the token from the state\r\n    console.log(token, \"token\");\r\n    \r\n    // Use the groundData to send the appropriate update request\r\n    const res = await axiosInstance.put(`/auth/grounds/${groundData.id}`, groundData); // Adjust API endpoint as needed\r\n    \r\n    // Dispatch success action with the updated ground data\r\n    dispatch({ type: 'UPDATE_GROUND_SUCCESS', payload: res.data });\r\n    return Promise.resolve(res.data); // Return a resolved promise if successful\r\n  } catch (err) {\r\n    // Dispatch failure action with the error message\r\n    dispatch({ type: 'UPDATE_GROUND_FAILURE', payload: err.response ? err.response.data.msg : 'Update failed' });\r\n    return Promise.reject(err); // Return a rejected promise if there's an error\r\n  }\r\n};\r\n// Fetch Grounds Action\r\nexport const fetchGrounds = () => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: FETCH_GROUNDS_REQUEST });\r\n    try {\r\n      const response = await axiosInstance.get('/auth/myGrounds'); // Adjust the URL as needed\r\n      dispatch({ type: FETCH_GROUNDS_SUCCESS, payload: response.data });\r\n      return Promise.resolve(response.data); // Return a resolved promise if successful\r\n    } catch (error) {\r\n      dispatch({ type: FETCH_GROUNDS_FAILURE, payload: error.message });\r\n      return Promise.reject(error); // Return a rejected promise if there's an error\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchUserGrounds = () => async dispatch => {\r\n  dispatch({ type: FETCH_GROUNDS_REQUEST_USER });\r\n  try {\r\n    const response = await axiosInstance.get('/auth/grounds'); // API to fetch all grounds\r\n    dispatch({ type: FETCH_GROUNDS_SUCCESS_USER, payload: response.data.grounds });\r\n    return Promise.resolve(response.data);\r\n  } catch (error) {\r\n    dispatch({ type: FETCH_GROUNDS_FAILURE_USER, payload: error.message });\r\n    return Promise.reject(error); // Return a rejected promise if there's an error\r\n  }\r\n};\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}