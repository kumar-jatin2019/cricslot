{"ast":null,"code":"var _jsxFileName = \"F:\\\\React Projects\\\\cricbook\\\\frontend\\\\cricslot\\\\src\\\\components\\\\AdminDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createGround, fetchGrounds } from '../redux/actions/groundActions';\nimport { Box, TextField, Button, Typography, IconButton } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport AddIcon from '@mui/icons-material/Add';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateGround = () => {\n  _s();\n  const [groundEntries, setGroundEntries] = useState([{\n    groundName: '',\n    location: '',\n    pricePerHour: '',\n    availability: '',\n    description: '',\n    slots: [{\n      slotName: '',\n      startTime: '',\n      endTime: ''\n    }] // Initial slot array\n  }]);\n  const dispatch = useDispatch();\n\n  // Fetching existing grounds\n  const grounds = useSelector(state => state.grounds); // Adjust based on your Redux state structure\n  console.log(grounds.grounds.grounds, \"grounds\");\n  let check = state.grounds.grounds;\n  console.log(check, \"chcl\");\n  useEffect(() => {\n    dispatch(fetchGrounds()); // Fetch grounds when the component mounts\n  }, [dispatch]);\n\n  // Handle ground input changes\n  const onChange = (index, e) => {\n    const newEntries = [...groundEntries];\n    newEntries[index][e.target.name] = e.target.value;\n    setGroundEntries(newEntries);\n  };\n\n  // Handle slot input changes\n  const handleSlotChange = (groundIndex, slotIndex, e) => {\n    const newEntries = [...groundEntries];\n    newEntries[groundIndex].slots[slotIndex][e.target.name] = e.target.value;\n    setGroundEntries(newEntries);\n  };\n\n  // Add a new ground entry\n  const addGroundEntry = () => {\n    setGroundEntries(prev => [...prev, {\n      groundName: '',\n      location: '',\n      pricePerHour: '',\n      availability: '',\n      description: '',\n      slots: [{\n        slotName: '',\n        startTime: '',\n        endTime: ''\n      }] // New ground with initial slot\n    }]);\n  };\n\n  // Remove a ground entry\n  const removeGroundEntry = index => {\n    if (groundEntries.length > 1) {\n      // Ensure at least one ground remains\n      const newEntries = [...groundEntries];\n      newEntries.splice(index, 1);\n      setGroundEntries(newEntries);\n    }\n  };\n\n  // Add a new slot to a specific ground\n  const addSlot = groundIndex => {\n    const newEntries = [...groundEntries];\n    newEntries[groundIndex].slots.push({\n      slotName: '',\n      startTime: '',\n      endTime: ''\n    });\n    setGroundEntries(newEntries);\n  };\n\n  // Remove a specific slot from a ground\n  const removeSlot = (groundIndex, slotIndex) => {\n    if (groundEntries[groundIndex].slots.length > 1) {\n      // Ensure at least one slot remains\n      const newEntries = [...groundEntries];\n      newEntries[groundIndex].slots.splice(slotIndex, 1);\n      setGroundEntries(newEntries);\n    }\n  };\n\n  // Submit form to create grounds with slots\n  const onSubmit = async e => {\n    e.preventDefault();\n    for (const entry of groundEntries) {\n      await dispatch(createGround(entry)); // Dispatch create ground action for each ground with its slots\n    }\n    alert(\"Grounds with slots created successfully!\"); // Notify user\n    dispatch(fetchGrounds()); // Fetch updated grounds after creating new ones\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: '600px',\n      margin: 'auto',\n      marginTop: '50px',\n      padding: '20px',\n      backgroundColor: '#f5f5f5',\n      borderRadius: '8px',\n      boxShadow: '0px 4px 10px rgba(0, 0, 0, 0.1)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      align: \"center\",\n      gutterBottom: true,\n      style: {\n        color: '#3f51b5'\n      },\n      children: check.length > 0 ? \"View Existing Grounds\" : \"Create a New Ground\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), grounds.grounds.length > 0 ? /*#__PURE__*/_jsxDEV(Box, {\n      children: grounds.map((entry, groundIndex) => /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          marginBottom: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: `Ground ${groundIndex + 1}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Ground Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 27\n          }, this), \" \", entry.groundName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Location:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 27\n          }, this), \" \", entry.location]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Price per Hour:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 27\n          }, this), \" \", entry.pricePerHour]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Availability:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 27\n          }, this), \" \", entry.availability]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Description:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 27\n          }, this), \" \", entry.description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          gutterBottom: true,\n          children: \"Slots:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 15\n        }, this), entry.slots.map((slot, slotIndex) => /*#__PURE__*/_jsxDEV(Typography, {\n          children: `${slot.slotName} (${slot.startTime} - ${slot.endTime})`\n        }, slotIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }, this))]\n      }, groundIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this)\n    // <form onSubmit={onSubmit}>\n    //   {groundEntries.map((entry, groundIndex) => (\n    //     <Box key={groundIndex} sx={{ marginBottom: '20px' }}>\n    //       <Typography variant=\"h6\" gutterBottom>Ground {groundIndex + 1}</Typography>\n\n    //       {/* Ground Details */}\n    //       <TextField\n    //         fullWidth\n    //         margin=\"normal\"\n    //         label=\"Ground Name\"\n    //         variant=\"outlined\"\n    //         name=\"groundName\"\n    //         value={entry.groundName}\n    //         onChange={(e) => onChange(groundIndex, e)}\n    //         required\n    //       />\n    //       <TextField\n    //         fullWidth\n    //         margin=\"normal\"\n    //         label=\"Location\"\n    //         variant=\"outlined\"\n    //         name=\"location\"\n    //         value={entry.location}\n    //         onChange={(e) => onChange(groundIndex, e)}\n    //         required\n    //       />\n    //       <TextField\n    //         fullWidth\n    //         margin=\"normal\"\n    //         label=\"Price per Hour\"\n    //         variant=\"outlined\"\n    //         name=\"pricePerHour\"\n    //         value={entry.pricePerHour}\n    //         onChange={(e) => onChange(groundIndex, e)}\n    //         required\n    //       />\n    //       <TextField\n    //         fullWidth\n    //         margin=\"normal\"\n    //         label=\"Availability\"\n    //         variant=\"outlined\"\n    //         name=\"availability\"\n    //         value={entry.availability}\n    //         onChange={(e) => onChange(groundIndex, e)}\n    //         required\n    //       />\n    //       <TextField\n    //         fullWidth\n    //         margin=\"normal\"\n    //         label=\"Description\"\n    //         variant=\"outlined\"\n    //         name=\"description\"\n    //         value={entry.description}\n    //         onChange={(e) => onChange(groundIndex, e)}\n    //         multiline\n    //         rows={4}\n    //         required\n    //       />\n\n    //       {/* Slot Details for the Ground */}\n    //       <Typography variant=\"subtitle1\" gutterBottom>Slots</Typography>\n    //       {entry.slots.map((slot, slotIndex) => (\n    //         <Box key={slotIndex} sx={{ marginBottom: '10px' }}>\n    //           <TextField\n    //             fullWidth\n    //             margin=\"normal\"\n    //             label=\"Slot Name\"\n    //             variant=\"outlined\"\n    //             name=\"slotName\"\n    //             value={slot.slotName}\n    //             onChange={(e) => handleSlotChange(groundIndex, slotIndex, e)}\n    //             required\n    //           />\n    //           <TextField\n    //             fullWidth\n    //             margin=\"normal\"\n    //             label=\"Start Time\"\n    //             variant=\"outlined\"\n    //             name=\"startTime\"\n    //             type=\"time\"\n    //             value={slot.startTime}\n    //             onChange={(e) => handleSlotChange(groundIndex, slotIndex, e)}\n    //             required\n    //           />\n    //           <TextField\n    //             fullWidth\n    //             margin=\"normal\"\n    //             label=\"End Time\"\n    //             variant=\"outlined\"\n    //             name=\"endTime\"\n    //             type=\"time\"\n    //             value={slot.endTime}\n    //             onChange={(e) => handleSlotChange(groundIndex, slotIndex, e)}\n    //             required\n    //           />\n    //           {entry.slots.length > 1 && (\n    //             <IconButton onClick={() => removeSlot(groundIndex, slotIndex)} color=\"error\" aria-label=\"remove slot\">\n    //               <DeleteIcon />\n    //             </IconButton>\n    //           )}\n    //         </Box>\n    //       ))}\n    //       <Button\n    //         onClick={() => addSlot(groundIndex)}\n    //         variant=\"outlined\"\n    //         color=\"primary\"\n    //         startIcon={<AddIcon />}\n    //         sx={{ marginTop: '10px', marginBottom: '10px' }}\n    //       >\n    //         Add Slot\n    //       </Button>\n    //       {groundEntries.length > 1 && (\n    //         <IconButton onClick={() => removeGroundEntry(groundIndex)} color=\"error\" aria-label=\"remove ground\">\n    //           <DeleteIcon />\n    //         </IconButton>\n    //       )}\n    //     </Box>\n    //   ))}\n    //   <Button\n    //     onClick={addGroundEntry}\n    //     variant=\"outlined\"\n    //     color=\"primary\"\n    //     startIcon={<AddIcon />}\n    //     sx={{ marginTop: '10px', marginBottom: '20px' }}\n    //   >\n    //     Add Ground\n    //   </Button>\n    //   <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\n    //     Create Grounds\n    //   </Button>\n    // </form>\n    ]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(CreateGround, \"NBPRW8JfipFwUgpp7qqoqKeLkxY=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = CreateGround;\nexport default CreateGround;\nvar _c;\n$RefreshReg$(_c, \"CreateGround\");","map":{"version":3,"names":["React","useState","useEffect","useDispatch","useSelector","createGround","fetchGrounds","Box","TextField","Button","Typography","IconButton","DeleteIcon","AddIcon","jsxDEV","_jsxDEV","CreateGround","_s","groundEntries","setGroundEntries","groundName","location","pricePerHour","availability","description","slots","slotName","startTime","endTime","dispatch","grounds","state","console","log","check","onChange","index","e","newEntries","target","name","value","handleSlotChange","groundIndex","slotIndex","addGroundEntry","prev","removeGroundEntry","length","splice","addSlot","push","removeSlot","onSubmit","preventDefault","entry","alert","sx","width","margin","marginTop","padding","backgroundColor","borderRadius","boxShadow","children","variant","align","gutterBottom","style","color","fileName","_jsxFileName","lineNumber","columnNumber","map","marginBottom","slot","_c","$RefreshReg$"],"sources":["F:/React Projects/cricbook/frontend/cricslot/src/components/AdminDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { createGround, fetchGrounds } from '../redux/actions/groundActions';\r\nimport {\r\n  Box,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  IconButton,\r\n} from '@mui/material';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport AddIcon from '@mui/icons-material/Add';\r\n\r\nconst CreateGround = () => {\r\n  const [groundEntries, setGroundEntries] = useState([\r\n    { \r\n      groundName: '', \r\n      location: '', \r\n      pricePerHour: '', \r\n      availability: '', \r\n      description: '', \r\n      slots: [{ slotName: '', startTime: '', endTime: '' }] // Initial slot array\r\n    },\r\n  ]);\r\n  \r\n  const dispatch = useDispatch();\r\n  \r\n  // Fetching existing grounds\r\n  const grounds = useSelector((state) => state.grounds); // Adjust based on your Redux state structure\r\n  console.log(grounds.grounds.grounds, \"grounds\");\r\n  let check  = state.grounds.grounds;\r\n  console.log(check, \"chcl\");\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchGrounds()); // Fetch grounds when the component mounts\r\n  }, [dispatch]);\r\n\r\n  // Handle ground input changes\r\n  const onChange = (index, e) => {\r\n    const newEntries = [...groundEntries];\r\n    newEntries[index][e.target.name] = e.target.value;\r\n    setGroundEntries(newEntries);\r\n  };\r\n\r\n  // Handle slot input changes\r\n  const handleSlotChange = (groundIndex, slotIndex, e) => {\r\n    const newEntries = [...groundEntries];\r\n    newEntries[groundIndex].slots[slotIndex][e.target.name] = e.target.value;\r\n    setGroundEntries(newEntries);\r\n  };\r\n\r\n  // Add a new ground entry\r\n  const addGroundEntry = () => {\r\n    setGroundEntries((prev) => [\r\n      ...prev, \r\n      { \r\n        groundName: '', \r\n        location: '', \r\n        pricePerHour: '', \r\n        availability: '', \r\n        description: '', \r\n        slots: [{ slotName: '', startTime: '', endTime: '' }] // New ground with initial slot\r\n      }\r\n    ]);\r\n  };\r\n\r\n  // Remove a ground entry\r\n  const removeGroundEntry = (index) => {\r\n    if (groundEntries.length > 1) { // Ensure at least one ground remains\r\n      const newEntries = [...groundEntries];\r\n      newEntries.splice(index, 1);\r\n      setGroundEntries(newEntries);\r\n    }\r\n  };\r\n\r\n  // Add a new slot to a specific ground\r\n  const addSlot = (groundIndex) => {\r\n    const newEntries = [...groundEntries];\r\n    newEntries[groundIndex].slots.push({ slotName: '', startTime: '', endTime: '' });\r\n    setGroundEntries(newEntries);\r\n  };\r\n\r\n  // Remove a specific slot from a ground\r\n  const removeSlot = (groundIndex, slotIndex) => {\r\n    if (groundEntries[groundIndex].slots.length > 1) { // Ensure at least one slot remains\r\n      const newEntries = [...groundEntries];\r\n      newEntries[groundIndex].slots.splice(slotIndex, 1);\r\n      setGroundEntries(newEntries);\r\n    }\r\n  };\r\n\r\n  // Submit form to create grounds with slots\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    for (const entry of groundEntries) {\r\n      await dispatch(createGround(entry)); // Dispatch create ground action for each ground with its slots\r\n    }\r\n    alert(\"Grounds with slots created successfully!\"); // Notify user\r\n    dispatch(fetchGrounds()); // Fetch updated grounds after creating new ones\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        width: '600px',\r\n        margin: 'auto',\r\n        marginTop: '50px',\r\n        padding: '20px',\r\n        backgroundColor: '#f5f5f5',\r\n        borderRadius: '8px',\r\n        boxShadow: '0px 4px 10px rgba(0, 0, 0, 0.1)',\r\n      }}\r\n    >\r\n      <Typography variant=\"h4\" align=\"center\" gutterBottom style={{ color: '#3f51b5' }}>\r\n        {check.length > 0 ? \"View Existing Grounds\" : \"Create a New Ground\"}\r\n      </Typography>\r\n\r\n      {grounds.grounds.length > 0 ? (\r\n        <Box>\r\n          {grounds.map((entry, groundIndex) => (\r\n            <Box key={groundIndex} sx={{ marginBottom: '20px' }}>\r\n              <Typography variant=\"h6\" gutterBottom>{`Ground ${groundIndex + 1}`}</Typography>\r\n              <Typography><strong>Ground Name:</strong> {entry.groundName}</Typography>\r\n              <Typography><strong>Location:</strong> {entry.location}</Typography>\r\n              <Typography><strong>Price per Hour:</strong> {entry.pricePerHour}</Typography>\r\n              <Typography><strong>Availability:</strong> {entry.availability}</Typography>\r\n              <Typography><strong>Description:</strong> {entry.description}</Typography>\r\n              <Typography variant=\"subtitle1\" gutterBottom>Slots:</Typography>\r\n              {entry.slots.map((slot, slotIndex) => (\r\n                <Typography key={slotIndex}>\r\n                  {`${slot.slotName} (${slot.startTime} - ${slot.endTime})`}\r\n                </Typography>\r\n              ))}\r\n            </Box>\r\n          ))}\r\n        </Box>\r\n      ) : (\r\n        <div>No </div>\r\n        // <form onSubmit={onSubmit}>\r\n        //   {groundEntries.map((entry, groundIndex) => (\r\n        //     <Box key={groundIndex} sx={{ marginBottom: '20px' }}>\r\n        //       <Typography variant=\"h6\" gutterBottom>Ground {groundIndex + 1}</Typography>\r\n\r\n        //       {/* Ground Details */}\r\n        //       <TextField\r\n        //         fullWidth\r\n        //         margin=\"normal\"\r\n        //         label=\"Ground Name\"\r\n        //         variant=\"outlined\"\r\n        //         name=\"groundName\"\r\n        //         value={entry.groundName}\r\n        //         onChange={(e) => onChange(groundIndex, e)}\r\n        //         required\r\n        //       />\r\n        //       <TextField\r\n        //         fullWidth\r\n        //         margin=\"normal\"\r\n        //         label=\"Location\"\r\n        //         variant=\"outlined\"\r\n        //         name=\"location\"\r\n        //         value={entry.location}\r\n        //         onChange={(e) => onChange(groundIndex, e)}\r\n        //         required\r\n        //       />\r\n        //       <TextField\r\n        //         fullWidth\r\n        //         margin=\"normal\"\r\n        //         label=\"Price per Hour\"\r\n        //         variant=\"outlined\"\r\n        //         name=\"pricePerHour\"\r\n        //         value={entry.pricePerHour}\r\n        //         onChange={(e) => onChange(groundIndex, e)}\r\n        //         required\r\n        //       />\r\n        //       <TextField\r\n        //         fullWidth\r\n        //         margin=\"normal\"\r\n        //         label=\"Availability\"\r\n        //         variant=\"outlined\"\r\n        //         name=\"availability\"\r\n        //         value={entry.availability}\r\n        //         onChange={(e) => onChange(groundIndex, e)}\r\n        //         required\r\n        //       />\r\n        //       <TextField\r\n        //         fullWidth\r\n        //         margin=\"normal\"\r\n        //         label=\"Description\"\r\n        //         variant=\"outlined\"\r\n        //         name=\"description\"\r\n        //         value={entry.description}\r\n        //         onChange={(e) => onChange(groundIndex, e)}\r\n        //         multiline\r\n        //         rows={4}\r\n        //         required\r\n        //       />\r\n\r\n        //       {/* Slot Details for the Ground */}\r\n        //       <Typography variant=\"subtitle1\" gutterBottom>Slots</Typography>\r\n        //       {entry.slots.map((slot, slotIndex) => (\r\n        //         <Box key={slotIndex} sx={{ marginBottom: '10px' }}>\r\n        //           <TextField\r\n        //             fullWidth\r\n        //             margin=\"normal\"\r\n        //             label=\"Slot Name\"\r\n        //             variant=\"outlined\"\r\n        //             name=\"slotName\"\r\n        //             value={slot.slotName}\r\n        //             onChange={(e) => handleSlotChange(groundIndex, slotIndex, e)}\r\n        //             required\r\n        //           />\r\n        //           <TextField\r\n        //             fullWidth\r\n        //             margin=\"normal\"\r\n        //             label=\"Start Time\"\r\n        //             variant=\"outlined\"\r\n        //             name=\"startTime\"\r\n        //             type=\"time\"\r\n        //             value={slot.startTime}\r\n        //             onChange={(e) => handleSlotChange(groundIndex, slotIndex, e)}\r\n        //             required\r\n        //           />\r\n        //           <TextField\r\n        //             fullWidth\r\n        //             margin=\"normal\"\r\n        //             label=\"End Time\"\r\n        //             variant=\"outlined\"\r\n        //             name=\"endTime\"\r\n        //             type=\"time\"\r\n        //             value={slot.endTime}\r\n        //             onChange={(e) => handleSlotChange(groundIndex, slotIndex, e)}\r\n        //             required\r\n        //           />\r\n        //           {entry.slots.length > 1 && (\r\n        //             <IconButton onClick={() => removeSlot(groundIndex, slotIndex)} color=\"error\" aria-label=\"remove slot\">\r\n        //               <DeleteIcon />\r\n        //             </IconButton>\r\n        //           )}\r\n        //         </Box>\r\n        //       ))}\r\n        //       <Button\r\n        //         onClick={() => addSlot(groundIndex)}\r\n        //         variant=\"outlined\"\r\n        //         color=\"primary\"\r\n        //         startIcon={<AddIcon />}\r\n        //         sx={{ marginTop: '10px', marginBottom: '10px' }}\r\n        //       >\r\n        //         Add Slot\r\n        //       </Button>\r\n        //       {groundEntries.length > 1 && (\r\n        //         <IconButton onClick={() => removeGroundEntry(groundIndex)} color=\"error\" aria-label=\"remove ground\">\r\n        //           <DeleteIcon />\r\n        //         </IconButton>\r\n        //       )}\r\n        //     </Box>\r\n        //   ))}\r\n        //   <Button\r\n        //     onClick={addGroundEntry}\r\n        //     variant=\"outlined\"\r\n        //     color=\"primary\"\r\n        //     startIcon={<AddIcon />}\r\n        //     sx={{ marginTop: '10px', marginBottom: '20px' }}\r\n        //   >\r\n        //     Add Ground\r\n        //   </Button>\r\n        //   <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\r\n        //     Create Grounds\r\n        //   </Button>\r\n        // </form>\r\n      )\r\n      \r\n      }\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CreateGround;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}